const mysql = require("mysql2/promise");
const fs = require("fs");
require("dotenv").config();

// Database configuration from .env
const dbConfig = {
  host: process.env.DB_HOST || "localhost",
  port: parseInt(process.env.DB_PORT) || 3306,
  user: process.env.DB_USERNAME || process.env.DB_USER || "root",
  password: process.env.DB_PASSWORD || process.env.DB_PASS || "",
  multipleStatements: true,
};

async function migrateDatabase() {
  let connection;

  try {
    console.log("üîó Connecting to production database...");
    console.log(`üìç Host: ${dbConfig.host}:${dbConfig.port}`);
    console.log(`üë§ User: ${dbConfig.user}`);
    console.log(
      `üóÑÔ∏è  Database: ${process.env.DB_DATABASE || "edusys_ai_2025_v1"}`
    );

    connection = await mysql.createConnection(dbConfig);

    // Set database - ADD to config
    const updatedConfig = {
      ...dbConfig,
      database: process.env.DB_DATABASE || "edusys_ai_2025_v1",
    };
    await connection.end();
    connection = await mysql.createConnection(updatedConfig);
    console.log(`‚úÖ Connected and using database: ${updatedConfig.database}`);

    // Read and execute migration SQL
    console.log("\nüìÑ Reading migration file...");
    const migrationPath = "./setup_new_columns.sql";
    if (!fs.existsSync(migrationPath)) {
      throw new Error(`Migration file not found: ${migrationPath}`);
    }

    const migrationSQL = fs.readFileSync(migrationPath, "utf8");

    // Execute ALTER TABLE statements directly (the critical ones)
    console.log("üöÄ Executing ALTER TABLE statements...\n");

    // Execute each ALTER TABLE statement individually (without IF NOT EXISTS for columns as it's not supported in all MySQL versions)
    const alterCommands = [
      // First check if columns already exist and add them one by one
      "DESCRIBE `curriculum_frameworks`",
      // Add columns without IF NOT EXISTS (will error if they exist but that's ok)
    ];

    // Check existing columns first
    const [existingColumns] = await connection.query(
      "DESCRIBE `curriculum_frameworks`"
    );
    const columnNames = existingColumns.map((col) => col.Field);

    // Add only missing columns
    const columnsToAdd = [
      {
        name: "total_sessions",
        sql: "ALTER TABLE `curriculum_frameworks` ADD COLUMN `total_sessions` INT UNSIGNED DEFAULT 0 COMMENT 'T·ªïng s·ªë bu·ªïi h·ªçc (s·ªë bu·ªïi trong kho√° h·ªçc)'",
      },
      {
        name: "session_duration_hours",
        sql: "ALTER TABLE `curriculum_frameworks` ADD COLUMN `session_duration_hours` DECIMAL(3, 1) DEFAULT NULL COMMENT 'Th·ªùi gian h·ªçc m·ªói bu·ªïi (theo gi·ªù, v√≠ d·ª•: 1.5 = 1 gi·ªù 30 ph√∫t)'",
      },
      {
        name: "learning_method",
        sql: "ALTER TABLE `curriculum_frameworks` ADD COLUMN `learning_method` VARCHAR(128) DEFAULT NULL COMMENT 'C√°ch th·ª©c h·ªçc: t·ª± h·ªçc, h∆∞·ªõng d·∫´n, theo d·ª± √°n, th·ª±c h√†nh, t·∫≠p trung v.v.'",
      },
      {
        name: "learning_format",
        sql: "ALTER TABLE `curriculum_frameworks` ADD COLUMN `learning_format` VARCHAR(128) DEFAULT NULL COMMENT 'H√¨nh th·ª©c h·ªçc: tr·ª±c tuy·∫øn, tr·ª±c ti·∫øp, k·∫øt h·ª£p, hybrid v.v.'",
      },
    ];

    console.log(
      `üìã Existing columns: ${columnNames.length}, Checking for missing columns...`
    );

    // Add missing columns
    let addedCount = 0;
    for (const colConfig of columnsToAdd) {
      if (!columnNames.includes(colConfig.name)) {
        try {
          console.log(`üîÑ Adding column: ${colConfig.name}...`);
          await connection.query(colConfig.sql);
          console.log(`‚úÖ Column ${colConfig.name} added successfully`);
          addedCount++;
        } catch (stmtError) {
          console.warn(
            `‚ö†Ô∏è  Failed to add column ${colConfig.name}: ${stmtError.message}`
          );
        }
      } else {
        console.log(`‚ö° Column ${colConfig.name} already exists - skipped`);
      }
    }

    console.log(`üìä Added ${addedCount} new columns`);

    // Add indexes try/catch each one
    console.log("\nüîÑ Adding indexes...");
    const indexCommands = [
      "ALTER TABLE `curriculum_frameworks` ADD INDEX `idx_learning_method` (`learning_method`)",
      "ALTER TABLE `curriculum_frameworks` ADD INDEX `idx_learning_format` (`learning_format`)",
      "ALTER TABLE `curriculum_frameworks` ADD INDEX `idx_total_sessions` (`total_sessions`)",
      "ALTER TABLE `curriculum_frameworks` ADD INDEX `idx_session_duration` (`session_duration_hours`)",
    ];

    for (const indexSql of indexCommands) {
      try {
        await connection.query(indexSql);
        console.log(`‚úÖ Index added successfully`);
      } catch (stmtError) {
        if (stmtError.message.toLowerCase().includes("duplicate")) {
          console.log(`‚ö° Index already exists - skipped`);
        } else {
          console.warn(`‚ö†Ô∏è  Failed to add index: ${stmtError.message}`);
        }
      }
    }

    console.log(`üìã Executing ${alterCommands.length} critical statements...`);

    for (let i = 0; i < alterCommands.length; i++) {
      const command = alterCommands[i];
      try {
        console.log(`üîÑ Executing ALTER ${i + 1}/${alterCommands.length}...`);
        await connection.query(command);
        console.log(`‚úÖ ALTER ${i + 1} completed successfully`);
      } catch (stmtError) {
        // Ignore "already exists" errors for idempotency
        if (
          stmtError.message.toLowerCase().includes("already exists") ||
          stmtError.message.toLowerCase().includes("duplicate")
        ) {
          console.log(`‚ö° ALTER ${i + 1} skipped (already exists)`);
        } else {
          console.warn(`‚ö†Ô∏è  ALTER ${i + 1} warning: ${stmtError.message}`);
        }
      }
    }

    // Verify the changes
    console.log("\nüìä Final verification...");
    const [rows] = await connection.query(`
      SELECT '‚úÖ MIGRATION COMPLETED: 4 tr∆∞·ªùng m·ªõi ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!' as status
    `);
    console.log("Status:", rows[0].status);

    console.log("‚úÖ Migration executed successfully!");
    console.log("\nüìä Migration Results:");

    // If we have result data, display it
    if (rows && Array.isArray(rows)) {
      rows.forEach((row, index) => {
        console.log(`   ${index + 1}. ${JSON.stringify(row)}`);
      });
    }

    console.log("\nüéâ Database updated with 4 new columns:");
    console.log("   ‚úÖ total_sessions: T·ªïng s·ªë bu·ªïi h·ªçc");
    console.log("   ‚úÖ session_duration_hours: Th·ªùi gian h·ªçc/bu·ªïi (gi·ªù)");
    console.log("   ‚úÖ learning_method: C√°ch th·ª©c h·ªçc");
    console.log("   ‚úÖ learning_format: H√¨nh th·ª©c h·ªçc");
  } catch (error) {
    console.error("\n‚ùå Migration failed:", error.message);
    if (error.code === "ER_ACCESS_DENIED_ERROR") {
      console.log("   üí° Check: Database credentials and network access");
      console.log("   üí° Remote host:", dbConfig.host);
      console.log("   üí° Username:", dbConfig.user);
    } else if (error.code === "ER_BAD_DB_ERROR") {
      console.log("   üí° Check: Database name exists on server");
    }
    process.exit(1);
  } finally {
    if (connection) {
      await connection.end();
      console.log("üîå Database connection closed");
    }
  }
}

// Run migration
console.log("=========================================");
console.log("MIGRATION: Adding 4 new columns to curriculum_frameworks");
console.log("=========================================\n");

migrateDatabase()
  .then(() => {
    console.log("\n‚úÖ Migration script finished successfully!");
    process.exit(0);
  })
  .catch((error) => {
    console.error("\n‚ùå Migration script failed:", error);
    process.exit(1);
  });
